// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fonipsfmywlsrnlyiduf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZvbmlwc2ZteXdsc3JubHlpZHVmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI0MDk2OTksImV4cCI6MjA1Nzk4NTY5OX0.GNrpUbjKHTYEtedrbY60ODL13zRgv1xhxC-922vgHCo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Session cache to minimize storage operations
let sessionCache: any = null;
let lastSessionCheck = 0;

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true,
    storage: {
      getItem: async (key) => {
        // Use cached session if recent
        if (key.endsWith('-auth-token') && sessionCache && Date.now() - lastSessionCheck < 5000) {
          return sessionCache;
        }
        const item = localStorage.getItem(key);
        if (key.endsWith('-auth-token')) {
          sessionCache = item;
          lastSessionCheck = Date.now();
        }
        return item;
      },
      setItem: async (key, value) => {
        if (key.endsWith('-auth-token')) {
          sessionCache = value;
          lastSessionCheck = Date.now();
        }
        return localStorage.setItem(key, value);
      },
      removeItem: async (key) => {
        if (key.endsWith('-auth-token')) {
          sessionCache = null;
        }
        return localStorage.removeItem(key);
      }
    }
  },
  global: {
    fetch: (input, init) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);
      return fetch(input, {
        ...init,
        signal: controller.signal
      }).finally(() => clearTimeout(timeoutId));
    }
  }
});

// Initialize with longer timeout
supabase.auth.initialize().catch(err => {
  console.warn("Initial auth check failed, will retry:", err);
}); 